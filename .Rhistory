allLabels <- merge(allLabels,activityLabel,by.x="ActivityID",by.y="ActivityID")
dataset <- cbind(dataset,allLabels$Activity)
colnames(dataset)[2] <- "Activity"
# Read and clean the features
camelCase<- function(features){
fx <- strsplit(features," ")
fx <- sapply(fx, FUN=function(x)
paste0(toupper(substring(x,1,1)),substring(x,2,nchar(x))))
fx <- sapply(fx, function(x) paste(x,collapse=""))
fx
}
features <- read.delim("./data/features.txt", header=FALSE,sep=" ")
features <- gsub("[[:punct:]]"," ",features$V2)
features <- gsub(" {2,}", " ", features)
features <- camelCase(features)
# Read the test and train set
testData <- read.table("./data/test/X_test.txt")
trainData <- read.table("./data/train/X_train.txt")
allData <- rbind(testData,trainData)
names(allData) <- features
allData <- allData[grep("(mean)|(std)",features, ignore.case=TRUE)]
# Combine the subjects
dataset <- cbind(dataset,allData)
dataset %>%
group_by(SubjectID, Activity) %>%
summarise_each(funs(mean))
aggData <- dataset %>%
group_by(SubjectID, Activity) %>%
summarise_each(funs(mean))
# load the required packages
library(dplyr)
# Read the test and train subjects and build it in the dataset
subjectTest <- read.table("./data/test/subject_test.txt")
subjectTrain <- read.table("./data/train/subject_train.txt")
dataset <- rbind(subjectTest,subjectTrain)
colnames(dataset)[1] <- "SubjectID"
# Read the activity labels
activityLabel <- read.table("./data/activity_labels.txt")
colnames(activityLabel) <- c("ActivityID","Activity")
# Read the test and training labels and bind it to the dataset
testLabel <- read.table("./data/test/y_test.txt")
trainLabel <- read.table("./data/train/y_train.txt")
allLabels <- rbind(testLabel,trainLabel)
colnames(allLabels)[1] <- "ActivityID"
allLabels <- merge(allLabels,activityLabel,by.x="ActivityID",by.y="ActivityID")
dataset <- cbind(dataset,allLabels$Activity)
colnames(dataset)[2] <- "Activity"
# Read and clean the features
camelCase<- function(features){
fx <- strsplit(features," ")
fx <- sapply(fx, FUN=function(x)
paste0(toupper(substring(x,1,1)),substring(x,2,nchar(x))))
fx <- sapply(fx, function(x) paste(x,collapse=""))
fx
}
features <- read.delim("./data/features.txt", header=FALSE,sep=" ")
features <- gsub("[[:punct:]]"," ",features$V2)
features <- gsub(" {2,}", " ", features)
features <- camelCase(features)
# Read the test and train set
testData <- read.table("./data/test/X_test.txt")
trainData <- read.table("./data/train/X_train.txt")
allData <- rbind(testData,trainData)
names(allData) <- features
allData <- allData[grep("(mean\\(\\))|(std\\(\\))",features, ignore.case=TRUE)]
# Combine the subjects
dataset <- cbind(dataset,allData)
aggData <- dataset %>%
group_by(SubjectID, Activity) %>%
summarise_each(funs(mean))
# Construct Final Data Set
features <- read.delim("./data/features.txt", header=FALSE,sep=" ")
View(features)
library(dplyr)
# load the required packages
library(dplyr)
# Read the test and train subjects and build it in the dataset
subjectTest <- read.table("./data/test/subject_test.txt")
subjectTrain <- read.table("./data/train/subject_train.txt")
dataset <- rbind(subjectTest,subjectTrain)
colnames(dataset)[1] <- "SubjectID"
# Read the activity labels
activityLabel <- read.table("./data/activity_labels.txt")
colnames(activityLabel) <- c("ActivityID","Activity")
# Read the test and training labels and bind it to the dataset
testLabel <- read.table("./data/test/y_test.txt")
trainLabel <- read.table("./data/train/y_train.txt")
allLabels <- rbind(testLabel,trainLabel)
colnames(allLabels)[1] <- "ActivityID"
allLabels <- merge(allLabels,activityLabel,by.x="ActivityID",by.y="ActivityID")
dataset <- cbind(dataset,allLabels$Activity)
colnames(dataset)[2] <- "Activity"
# Read the test and train set
testData <- read.table("./data/test/X_test.txt")
trainData <- read.table("./data/train/X_train.txt")
allData <- rbind(testData,trainData)
# Read features and then subset allData by features
features <- read.delim("./data/features.txt", header=FALSE,sep=" ")
names(allData) <- features
allData <- allData[grep("((mean).*\\(\\))|((std).*\\(\\))",features, ignore.case=TRUE)]
# Clean the column names
camelCase<- function(features){
fx <- strsplit(features," ")
fx <- sapply(fx, FUN=function(x)
paste0(toupper(substring(x,1,1)),substring(x,2,nchar(x))))
fx <- sapply(fx, function(x) paste(x,collapse=""))
fx
}
sfeatures <- names(allData)
sfeatures <- gsub("[[:punct:]]"," ",sfeatures)
sfeatures <- gsub(" {2,}", " ",sfeatures)
sfeatures <- camelCase(sfeatures)
names(allData) <- sfeatures
# Combine the subjects
dataset <- cbind(dataset,allData)
aggData <- dataset %>%
group_by(SubjectID, Activity) %>%
summarise_each(funs(mean))
# Construct Final Data Set
library(dplyr)
# Read the test and train subjects and build it in the dataset
subjectTest <- read.table("./data/test/subject_test.txt")
subjectTrain <- read.table("./data/train/subject_train.txt")
dataset <- rbind(subjectTest,subjectTrain)
colnames(dataset)[1] <- "SubjectID"
activityLabel <- read.table("./data/activity_labels.txt")
colnames(activityLabel) <- c("ActivityID","Activity")
testLabel <- read.table("./data/test/y_test.txt")
trainLabel <- read.table("./data/train/y_train.txt")
allLabels <- rbind(testLabel,trainLabel)
colnames(allLabels)[1] <- "ActivityID"
allLabels <- merge(allLabels,activityLabel,by.x="ActivityID",by.y="ActivityID")
dataset <- cbind(dataset,allLabels$Activity)
colnames(dataset)[2] <- "Activity"
testData <- read.table("./data/test/X_test.txt")
trainData <- read.table("./data/train/X_train.txt")
allData <- rbind(testData,trainData)
features <- read.delim("./data/features.txt", header=FALSE,sep=" ")
features
allData <- allData[grep("((mean).*\\(\\))|((std).*\\(\\))",features, ignore.case=TRUE)]
grep("((mean).*\\(\\))|((std).*\\(\\))",features, ignore.case=TRUE)
grep("((mean\\(\\))|((std\\(\\))",features, ignore.case=TRUE)
grep("((mean\(\))|((std\(\))",features, ignore.case=TRUE)
grep("(mean\\(\\))|((std\\(\\))",features, ignore.case=TRUE)
grep("(mean\\(\\))|(std\\(\\))",features, ignore.case=TRUE)
mean()
grep("(mean\\(\\))",features, ignore.case=TRUE)
features
x<-grep("(mean\\(\\))",features, ignore.case=TRUE)
x
x<-grep("(mean)",features, ignore.case=TRUE)
x
x<-grep("mean",features, ignore.case=TRUE)
x
grep("m",features, ignore.case=TRUE)
grep(".*m",features, ignore.case=TRUE)
grep(",features, ignore.case=TRUE)
""
""
)
grep("",features, ignore.case=TRUE)
x<-grep("",features, ignore.case=TRUE)
x
str(features)
x<-grep("mean",features$V2, ignore.case=TRUE)
x
names(allData)
features <- read.delim("./data/features.txt", header=FALSE,sep=" ")
names(allData) <- features$V2
features$V2
names(allData) <- features$V2
features <- features$V2
names(allData) <- features$V2
names(allData) <- features
names(allData)
ncol(allData)
allData <- rbind(testData,trainData)
length(features)
features <- read.delim("./data/features.txt", header=FALSE,sep=" ")
features <- features$V2
names(allData) <- features
grep("((mean).*\\(\\))|((std).*\\(\\))",names(allData), ignore.case=TRUE)
x<-grep("((mean).*\\(\\))|((std).*\\(\\))",names(allData), ignore.case=TRUE)
length(x)
names(allData)
x<-grep("((mean).*\\(\\))|((std).*\\(\\))",names(allData), ignore.case=TRUE)
x
features(x)
features[x]
View(features[x])
allData <- allData[grep("((mean).*\\(\\))|((std).*\\(\\))",
names(allData),
ignore.case=TRUE)]
camelCase<- function(features){
fx <- strsplit(features," ")
fx <- sapply(fx, FUN=function(x)
paste0(toupper(substring(x,1,1)),substring(x,2,nchar(x))))
fx <- sapply(fx, function(x) paste(x,collapse=""))
fx
}
sfeatures <- names(allData)
sfeatures
sfeatures <- gsub("[[:punct:]]"," ",sfeatures)
sfeatures
sfeatures <- gsub(" {2,}", " ",sfeatures)
sfeature
sfeatures
sfeatures <- camelCase(sfeatures)
sfeatures
names(allData) <- sfeatures
dataset <- cbind(dataset,allData)
dataset
head(dataset)
# load the required packages
library(dplyr)
# Read the test and train subjects and build it into the
# subject and activity data set variable saData.
subjectTest <- read.table("./data/test/subject_test.txt")
subjectTrain <- read.table("./data/train/subject_train.txt")
saData <- rbind(subjectTest,subjectTrain)
colnames(saData)[1] <- "SubjectID"
# Read the activity labels
activityLabel <- read.table("./data/activity_labels.txt")
colnames(activityLabel) <- c("ActivityID","Activity")
# Read the test and training labels and bind it to the dataset
testLabel <- read.table("./data/test/y_test.txt")
trainLabel <- read.table("./data/train/y_train.txt")
allLabels <- rbind(testLabel,trainLabel)
colnames(allLabels)[1] <- "ActivityID"
allLabels <- merge(allLabels,activityLabel,by.x="ActivityID",by.y="ActivityID")
saData <- cbind(saData,allLabels$Activity)
colnames(saData)[2] <- "Activity"
# Read the test and train set
testData <- read.table("./data/test/X_test.txt")
trainData <- read.table("./data/train/X_train.txt")
allData <- rbind(testData,trainData)
# Read features and then subset allData by features
features <- read.delim("./data/features.txt", header=FALSE,sep=" ")
features <- features$V2
names(allData) <- features
allData <- allData[grep("((mean).*\\(\\))|((std).*\\(\\))",
names(allData),
ignore.case=TRUE)]
# Clean the column names
camelCase<- function(features){
fx <- strsplit(features," ")
fx <- sapply(fx, FUN=function(x)
paste0(toupper(substring(x,1,1)),substring(x,2,nchar(x))))
fx <- sapply(fx, function(x) paste(x,collapse=""))
fx
}
sfeatures <- names(allData)
sfeatures <- gsub("[[:punct:]]"," ",sfeatures)
sfeatures <- gsub(" {2,}", " ",sfeatures)
sfeatures <- camelCase(sfeatures)
names(allData) <- sfeatures
# Combine the subjects
aggData <- cbind(saData,allData)
aggData <- aggData %>%
group_by(SubjectID, Activity) %>%
summarise_each(funs(mean))
# Construct Final Data Set
summary(aggData)
nrow(aggData)
head(aggData)
View(aggData)
finalData <- sort(unique(aggData$SubjectID))
finalData <- as.data.fram(sort(unique(aggData$SubjectID)))
finalData <- as.data.frame(sort(unique(aggData$SubjectID)))
finalData
names(finalData) <- "SubjectID"
finalData
finalData <- rep(finalData,5)
finalData
finalData <- as.data.frame(sort(rep(unique(aggData$SubjectID),6)))
finalData
finalData <- rep(unique(aggData$SubjectID),length(unique(aggData$Activity)))
finalData
finalData <- sort(finalData)
finalData
uniqueActivities <- unique(aggData$Activity)
uniqueSubjects <- unique(aggData$SubjectID)
finalData <- rep(uniqueSubjects,length(uniqueActivities))
finalData
finalData <- sort(finalData)
finalData
repCount <- length(uniqueSubjects) / length(uniqueActivities)
finalData <- rep(uniqueSubjects,length(uniqueActivities))
finalData <- sort(finalData)
finalData
finalData <- cbind(finalData,rep(uniqueActivities,repCount))
finalData
finalData <- as.data.frame(sort(finalData))
finalData <- cbind(finalData,rep(uniqueActivities,repCount))
finalData
uniqueActivities <- sort(unique(aggData$Activity))
uniqueSubjects <- unique(aggData$SubjectID)
repCount <- length(uniqueSubjects) / length(uniqueActivities)
finalData <- rep(uniqueSubjects,length(uniqueActivities))
finalData <- as.data.frame(sort(finalData))
finalData <- cbind(finalData,rep(uniqueActivities,repCount))
finalDat
finalData
names(finalData) <- c("SubjectID","Activity")
names(finalDat)
names(finalData)
merge(finalData,aggData,by.x=c("SubjectID","ActivityID"),by.y=c("SubjectID","ActivityID"))
?merge
length(uniqueSubjects)
length(uniqueActivities)
type
str(finalData)
str(aggData)
aggData <- as.data.frame(aggData)
merge(finalData,aggData,by.x=c("SubjectID","ActivityID"),by.y=c("SubjectID","ActivityID"))
?merge
aggData
finalDat
finalData
str(finalData)
merge(finalData,aggData,by=c("SubjectID","Activity"))
head(merge(finalData,aggData,by=c("SubjectID","Activity")))
x<-merge(finalData,aggData,by=c("SubjectID","Activity"))
x<-merge(finalData,aggData,by=c("SubjectID","Activity"),all=TRUE)
x
head(x)
head(x,n=12)
finalData <- merge(finalData,aggData,by=c("SubjectID","Activity"),all=TRUE)
# load the required packages
library(dplyr)
# Read the test and train subjects and build it into the
# subject and activity data set variable saData.
subjectTest <- read.table("./data/test/subject_test.txt")
subjectTrain <- read.table("./data/train/subject_train.txt")
saData <- rbind(subjectTest,subjectTrain)
colnames(saData)[1] <- "SubjectID"
# Read the activity labels
activityLabel <- read.table("./data/activity_labels.txt")
colnames(activityLabel) <- c("ActivityID","Activity")
# Read the test and training labels and bind it to the dataset
testLabel <- read.table("./data/test/y_test.txt")
trainLabel <- read.table("./data/train/y_train.txt")
allLabels <- rbind(testLabel,trainLabel)
colnames(allLabels)[1] <- "ActivityID"
allLabels <- merge(allLabels,activityLabel,by.x="ActivityID",by.y="ActivityID")
saData <- cbind(saData,allLabels$Activity)
colnames(saData)[2] <- "Activity"
# Read the test and train set
testData <- read.table("./data/test/X_test.txt")
trainData <- read.table("./data/train/X_train.txt")
allData <- rbind(testData,trainData)
# Read features and then subset allData by features
features <- read.delim("./data/features.txt", header=FALSE,sep=" ")
features <- features$V2
names(allData) <- features
allData <- allData[grep("((mean).*\\(\\))|((std).*\\(\\))",
names(allData),
ignore.case=TRUE)]
# Clean the column names
camelCase<- function(features){
fx <- strsplit(features," ")
fx <- sapply(fx, FUN=function(x)
paste0(toupper(substring(x,1,1)),substring(x,2,nchar(x))))
fx <- sapply(fx, function(x) paste(x,collapse=""))
fx
}
sfeatures <- names(allData)
sfeatures <- gsub("[[:punct:]]"," ",sfeatures)
sfeatures <- gsub(" {2,}", " ",sfeatures)
sfeatures <- camelCase(sfeatures)
names(allData) <- sfeatures
# Combine the subjects
aggData <- cbind(saData,allData)
aggData <- aggData %>%
group_by(SubjectID, Activity) %>%
summarise_each(funs(mean))
# Construct Final Data Set
uniqueActivities <- sort(unique(aggData$Activity))
uniqueSubjects <- unique(aggData$SubjectID)
repCount <- length(uniqueSubjects) / length(uniqueActivities)
finalData <- rep(uniqueSubjects,length(uniqueActivities))
finalData <- as.data.frame(sort(finalData))
finalData <- cbind(finalData,rep(uniqueActivities,repCount))
names(finalData) <- c("SubjectID","Activity")
finalData <- merge(finalData,aggData,by=c("SubjectID","Activity"),all=TRUE)
x<-merge(finalData,aggData,by=c("SubjectID","Activity"),all=TRUE)
finalData
View(finalData)
View(finalDat)
View(finalData)
View(names(finalDat))
View(names(finalData))
# load the required packages
library(dplyr)
# Read the test and train subjects and build it into the
# subject and activity data set variable saData.
subjectTest <- read.table("./UCI HAR Dataset/test/subject_test.txt")
subjectTrain <- read.table("./UCI HAR Dataset/train/subject_train.txt")
saData <- rbind(subjectTest,subjectTrain)
colnames(saData)[1] <- "SubjectID"
# Read the activity labels
activityLabel <- read.table("./UCI HAR Dataset/activity_labels.txt")
colnames(activityLabel) <- c("ActivityID","Activity")
# Read the test and training labels and bind it to the dataset
testLabel <- read.table("./UCI HAR Dataset/test/y_test.txt")
trainLabel <- read.table("./UCI HAR Dataset/train/y_train.txt")
allLabels <- rbind(testLabel,trainLabel)
colnames(allLabels)[1] <- "ActivityID"
allLabels <- merge(allLabels,activityLabel,by.x="ActivityID",by.y="ActivityID")
saData <- cbind(saData,allLabels$Activity)
colnames(saData)[2] <- "Activity"
# Read the test and train set
testData <- read.table("./UCI HAR Dataset/test/X_test.txt")
trainData <- read.table("./UCI HAR Dataset/train/X_train.txt")
allData <- rbind(testData,trainData)
# Read features and then subset allData by features
features <- read.delim("./UCI HAR Dataset/features.txt", header=FALSE,sep=" ")
features <- features$V2
names(allData) <- features
allData <- allData[grep("((mean).*\\(\\))|((std).*\\(\\))",
names(allData),
ignore.case=TRUE)]
# Clean the column names
camelCase<- function(features){
fx <- strsplit(features," ")
fx <- sapply(fx, FUN=function(x)
paste0(toupper(substring(x,1,1)),substring(x,2,nchar(x))))
fx <- sapply(fx, function(x) paste(x,collapse=""))
fx
}
sfeatures <- names(allData)
sfeatures <- gsub("[[:punct:]]"," ",sfeatures)
sfeatures <- gsub(" {2,}", " ",sfeatures)
sfeatures <- camelCase(sfeatures)
names(allData) <- sfeatures
# Combine the subjects
aggData <- cbind(saData,allData)
aggData <- aggData %>%
group_by(SubjectID, Activity) %>%
summarise_each(funs(mean))
# Construct Final Data Set with required subjects and activities
uniqueActivities <- sort(unique(aggData$Activity))
uniqueSubjects <- unique(aggData$SubjectID)
repCount <- length(uniqueSubjects) / length(uniqueActivities)
finalData <- rep(uniqueSubjects,length(uniqueActivities))
finalData <- as.data.frame(sort(finalData))
finalData <- cbind(finalData,rep(uniqueActivities,repCount))
names(finalData) <- c("SubjectID","Activity")
# Merge final data set with aggregated data set (aggdata)
finalData <- merge(finalData,aggData,by=c("SubjectID","Activity"),all=TRUE)
str(finalData)
# load the required packages
library(dplyr)
# Creates a function to camel casing the column names
camelCase<- function(features){
fx <- strsplit(features," ")
fx <- sapply(fx, FUN=function(x)
paste0(toupper(substring(x,1,1)),substring(x,2,nchar(x))))
fx <- sapply(fx, function(x) paste(x,collapse=""))
fx
}
# Read the test and training subjects data before combining them as
# part of the subject and activity data set variable called saData.
subjectTest <- read.table("./UCI HAR Dataset/test/subject_test.txt")
subjectTrain <- read.table("./UCI HAR Dataset/train/subject_train.txt")
saData <- rbind(subjectTest,subjectTrain)
colnames(saData)[1] <- "SubjectID"
# Reads the class labels and their activity name
activityLabel <- read.table("./UCI HAR Dataset/activity_labels.txt")
colnames(activityLabel) <- c("ActivityID","Activity")
# Read the test and training labels into the variable allLabels
testLabel <- read.table("./UCI HAR Dataset/test/y_test.txt")
trainLabel <- read.table("./UCI HAR Dataset/train/y_train.txt")
allLabels <- rbind(testLabel,trainLabel)
# Name the label column as ActivityID and merges it with the activity name
colnames(allLabels)[1] <- "ActivityID"
allLabels <- merge(allLabels,activityLabel,by.x="ActivityID",by.y="ActivityID")
saData <- cbind(saData,allLabels$Activity)
colnames(saData)[2] <- "Activity"
# Read the test and train set
testData <- read.table("./UCI HAR Dataset/test/X_test.txt")
trainData <- read.table("./UCI HAR Dataset/train/X_train.txt")
allData <- rbind(testData,trainData)
# Read features and then subset allData by features
features <- read.delim("./UCI HAR Dataset/features.txt", header=FALSE,sep=" ")
features <- features$V2
names(allData) <- features
allData <- allData[grep("((mean).*\\(\\))|((std).*\\(\\))",
names(allData),
ignore.case=TRUE)]
# Clean the column names
sfeatures <- names(allData)
sfeatures <- gsub("[[:punct:]]"," ",sfeatures)
sfeatures <- gsub(" {2,}", " ",sfeatures)
sfeatures <- camelCase(sfeatures)
names(allData) <- sfeatures
# Combine the subjects
aggData <- cbind(saData,allData)
aggData <- aggData %>%
group_by(SubjectID, Activity) %>%
summarise_each(funs(mean))
# Construct Final Data Set with required subjects and activities
uniqueActivities <- sort(unique(aggData$Activity))
uniqueSubjects <- unique(aggData$SubjectID)
repCount <- length(uniqueSubjects) / length(uniqueActivities)
finalData <- rep(uniqueSubjects,length(uniqueActivities))
finalData <- as.data.frame(sort(finalData))
finalData <- cbind(finalData,rep(uniqueActivities,repCount))
names(finalData) <- c("SubjectID","Activity")
# Merge final data set with aggregated data set (aggdata)
finalData <- merge(finalData,aggData,by=c("SubjectID","Activity"),all=TRUE)
finalData
